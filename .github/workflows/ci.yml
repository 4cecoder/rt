name: CI

on:
  push:
    branches: [ master, feature/* ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: clippy, rustfmt
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run unit tests
      run: cargo test --verbose
    
    - name: Run integration tests  
      run: cargo test --test integration_tests --verbose
    
    - name: Check documentation
      run: cargo doc --no-deps --document-private-items

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: benchmark-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run benchmarks
      run: |
        cargo bench --bench rendering_benchmarks -- --output-format json > benchmark_results.json
        cargo bench --bench memory_benchmarks -- --output-format json >> benchmark_results.json
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'criterion'
        output-file-path: benchmark_results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        comment-on-alert: true
        alert-threshold: '150%'
        fail-on-alert: true
        auto-push: false

  memory_test:
    name: Memory Usage Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev valgrind
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: memory-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build with debug symbols
      run: cargo build --profile dev
    
    - name: Run memory leak detection
      run: |
        # Create a simple test runner for memory leak detection
        cat > memory_test.rs << 'EOF'
        use rt::terminal::Terminal;
        use std::time::Duration;
        
        fn main() {
            let mut terminal = Terminal::with_size(80, 24);
            
            // Simulate intensive usage
            for i in 0..1000 {
                terminal.write_text(&format!("Test line {} with content\n", i));
                if i % 100 == 0 {
                    terminal.resize(80 + (i % 40), 24 + (i % 16));
                }
                terminal.update(Duration::from_millis(16));
            }
            
            println!("Memory test completed successfully");
        }
        EOF
        
        rustc --edition 2021 -L target/debug/deps memory_test.rs -o memory_test --extern rt=target/debug/librt-*.rlib
        
        # Run under valgrind to detect memory leaks (if available)
        if command -v valgrind >/dev/null 2>&1; then
          valgrind --leak-check=full --error-exitcode=1 ./memory_test
        else
          ./memory_test
        fi

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    
    - name: Generate coverage report
      run: |
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload to codecov.io
      uses: codecov/codecov-action@v3
      with:
        file: lcov.info
        fail_ci_if_error: true

  performance_regression:
    name: Performance Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: perf-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run performance regression tests
      run: |
        # Test key performance metrics
        cargo test --release --test integration_tests test_large_buffer_performance -- --ignored
        cargo test --release --test integration_tests test_extensive_text_writing -- --ignored
        cargo test --release --test integration_tests test_rapid_text_input_stress -- --ignored
        cargo test --release --test integration_tests test_frequent_resize_stress -- --ignored
        
        # Run micro-benchmarks for critical path
        cargo bench --bench rendering_benchmarks benchmark_fps_simulation
        cargo bench --bench memory_benchmarks benchmark_memory_under_load

  build_release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: rt-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: rt-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            name: rt-macos-x86_64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: release-${{ matrix.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Rename binary
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          mv target/${{ matrix.target }}/release/rt.exe ${{ matrix.name }}
        else
          mv target/${{ matrix.target }}/release/rt ${{ matrix.name }}
        fi
    
    - name: Upload release artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  quality_gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test, memory_test, security_audit]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Test job result: ${{ needs.test.result }}"
        echo "Memory test job result: ${{ needs.memory_test.result }}"
        echo "Security audit job result: ${{ needs.security_audit.result }}"
        
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Tests failed!"
          exit 1
        fi
        
        if [[ "${{ needs.memory_test.result }}" != "success" ]]; then
          echo "Memory tests failed!"
          exit 1
        fi
        
        if [[ "${{ needs.security_audit.result }}" != "success" ]]; then
          echo "Security audit failed!"
          exit 1
        fi
        
        echo "All quality gates passed!"